(define (domain no_name)
	(:requirements :strips :typing :negative-preconditions :mep :no-duplicates)
	(:predicates (owner  ?ag_cfhth - agent ?color_vcthr - color) (free_table) (table  ?color_qbfoz - color))
	(:action lookup
		:act_type sensing
		:parameters (?a1 - agent ?c1 - color)
		:effect (when (owner ?a1 ?c1) (owner ?a1 ?c1))
		:observers (and (?a1))

	)
	(:action pickfromtableplaceonstack
		:act_type ontic
		:parameters (?a1 - agent ?c1 - color)
		:precondition (and (-free_table ) (-owner ?a1 ?c1) (-free_table ) (table ?c1) ([?a1](table ?c1)))
		:effect (and (owner ?a1 ?c1) (-table ?c1) (free_table ))
		:observers (and (?a1))

	)
	(:action pickfromstackplaceontable
		:act_type ontic
		:parameters (?a1 - agent ?c1 - color)
		:precondition (and (owner ?a1 ?c1) (free_table ) ([?a1](free_table )) ([?a1](owner ?a1 ?c1)))
		:effect (and (-owner ?a1 ?c1) (table ?c1) (-free_table ))
		:observers (and (?a1))

	)
	(:action announceontable
		:act_type announcement
		:parameters (?a1 - agent ?c1 - color)
		:precondition (and (table ?c1) ([?a1](table ?c1)))
		:effect (and (-owner ?a1 ?c1) (table ?c1) (-free_table ))
		:observers (and (forall (?a2) (?a2)))

	)
	(:action announcefreetable
		:act_type announcement
		:parameters (?a1 - agent)
		:precondition (and (free_table ) ([?a1](free_table )))
		:effect (free_table )
		:observers (and (forall (?a2) (?a2)))

	)
)
