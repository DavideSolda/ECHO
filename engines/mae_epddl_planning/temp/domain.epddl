(define (domain coininthebox)
	(:requirements :strips :negative-preconditions :mep :no-duplicates)
	(:predicates (opened) (has_key  ?ag_abvyv - agent) (looking  ?ag_wldam - agent) (tail))
	(:action movetobox
		:act_type ontic
		:parameters (?ag - agent)
		:precondition (and ([?ag](in_room_empty ?ag)) (in_room_empty ?ag))
		:effect (and (-in_room_empty ?ag) (in_room_box ?ag))
		:observers (and (forall (?ag2) (?ag2)))

	)
	(:action movetoempty
		:act_type ontic
		:parameters (?ag - agent)
		:precondition (and ([?ag](in_room_box ?ag)) (in_room_box ?ag))
		:effect (and (in_room_empty ?ag) (-in_room_box ?ag))
		:observers (and (forall (?ag2) (?ag2)))

	)
	(:action open
		:act_type ontic
		:parameters (?ag - agent)
		:precondition (and (has_key ?ag) ([?ag](has_key ?ag)) (in_room_box ?ag))
		:effect (opened )
		:observers (and (forall (diff(?ag2)(?ag)) (?ag2)))

	)
	(:action peek
		:act_type sensing
		:parameters (?ag - agent)
		:precondition (and ([?ag](opened )) ([?ag](looking ?ag)) (looking ?ag) (opened ) (in_room_box ?ag))
		:effect (when (looking ?ag) (tail ))
		:observers (and (?ag))
		:p_observers (and (forall (diff(?ag2)(?ag)) (?ag2) (in_room_box ?ag2)))
	)
	(:action signal
		:act_type sensing
		:parameters (?ag - agent)
		:precondition (and ([?ag](opened )) ([?ag](looking ?ag)) (looking ?ag) (opened ) (in_room_box ?ag))
		:effect (when (looking ?ag) (tail ))
		:observers (and (?ag))

	)
	(:action distract
		:act_type announcement
		:parameters (?ag - agent ?ag2 - agent)
		:precondition (and ([?ag](looking ?ag)) ([?ag2](looking ?ag2)))
		:effect (-looking ?ag2)
		:observers (and (forall (diff(?ag2)(?ag2)) (?ag2) (looking ?ag2)) (?ag2))

	)
)
