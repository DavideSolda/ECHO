%This file is automatically generated from an E-PDDL specification and follows the mAp syntax.

%%%%%%%%%%%%%%%%%%%%%%%%%    FLUENTS    %%%%%%%%%%%%%%%%%%%%%%%%
%Fluents generated from EPDDL by grounding each predicate (and cheking in :init, :goal and actions for extra predicates)
%The fluents are lexicographically sorted and printed in sets of 10

fluent a_==_a, b_==_b, c_==_c, c_l_o_s_e_d, has_key_a, has_key_b, has_key_c, looking_a, looking_b, looking_c;
fluent opened, tail;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%    ACTIONS' NAMES    %%%%%%%%%%%%%%%%%%%%%
%Actions' names generated from EPDDL by adding to each action names its grounded predicates

action open_a, open_b, open_c, peek_a, peek_b, peek_c, signal_a_a, signal_a_b, signal_a_c, signal_b_a;
action signal_b_b, signal_b_c, signal_c_a, signal_c_b, signal_c_c, distract_a_a, distract_a_b, distract_a_c, distract_b_a, distract_b_b;
action distract_b_c, distract_c_a, distract_c_b, distract_c_c, announce_a, announce_b, announce_c;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%    AGENTS' NAMES    %%%%%%%%%%%%%%%%%%%%%%
%Agents' names generated from EPDDL by looking at the 'agent' predicate

agent a, b, c;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%    ACTIONS' SPECIFICATIONS    %%%%%%%%%%%%%%%%
%Actions' specifications generated from EPDDL by grounding each action's definition

%%%Action open_a

executable open_a if B(a,B(a,has_key_a)), has_key_a, a_==_a, -B(a,has_head_a);
open_a causes opened;
open_a causes -c_l_o_s_e_d;
b observes open_a if looking_b;
c observes open_a if looking_c;
a observes open_a;

%%%

%%%Action open_b

executable open_b if B(b,B(b,has_key_b)), has_key_b, b_==_b, -B(b,has_head_b);
open_b causes opened;
open_b causes -c_l_o_s_e_d;
a observes open_b if looking_a;
c observes open_b if looking_c;
b observes open_b;

%%%

%%%Action open_c

executable open_c if B(c,B(c,has_key_c)), has_key_c, c_==_c, -B(c,has_head_c);
open_c causes opened;
open_c causes -c_l_o_s_e_d;
a observes open_c if looking_a;
b observes open_c if looking_b;
c observes open_c;

%%%

%%%Action peek_a

executable peek_a if B(a,looking_a), B(a,opened), looking_a, opened;
peek_a determines tail if looking_a;
a observes peek_a;
b aware_of peek_a if looking_b;
c aware_of peek_a if looking_c;

%%%

%%%Action peek_b

executable peek_b if B(b,looking_b), B(b,opened), looking_b, opened;
peek_b determines tail if looking_b;
b observes peek_b;
a aware_of peek_b if looking_a;
c aware_of peek_b if looking_c;

%%%

%%%Action peek_c

executable peek_c if B(c,looking_c), B(c,opened), looking_c, opened;
peek_c determines tail if looking_c;
c observes peek_c;
a aware_of peek_c if looking_a;
b aware_of peek_c if looking_b;

%%%

%%%Action signal_a_a

executable signal_a_a if B(a,-looking_a), B(a,looking_a);
signal_a_a causes looking_a;
a observes signal_a_a;
a observes signal_a_a;

%%%

%%%Action signal_a_b

executable signal_a_b if B(a,-looking_b), B(a,looking_a);
signal_a_b causes looking_b;
a observes signal_a_b;
b observes signal_a_b;

%%%

%%%Action signal_a_c

executable signal_a_c if B(a,-looking_c), B(a,looking_a);
signal_a_c causes looking_c;
a observes signal_a_c;
c observes signal_a_c;

%%%

%%%Action signal_b_a

executable signal_b_a if B(b,-looking_a), B(b,looking_b);
signal_b_a causes looking_a;
b observes signal_b_a;
a observes signal_b_a;

%%%

%%%Action signal_b_b

executable signal_b_b if B(b,-looking_b), B(b,looking_b);
signal_b_b causes looking_b;
b observes signal_b_b;
b observes signal_b_b;

%%%

%%%Action signal_b_c

executable signal_b_c if B(b,-looking_c), B(b,looking_b);
signal_b_c causes looking_c;
b observes signal_b_c;
c observes signal_b_c;

%%%

%%%Action signal_c_a

executable signal_c_a if B(c,-looking_a), B(c,looking_c);
signal_c_a causes looking_a;
c observes signal_c_a;
a observes signal_c_a;

%%%

%%%Action signal_c_b

executable signal_c_b if B(c,-looking_b), B(c,looking_c);
signal_c_b causes looking_b;
c observes signal_c_b;
b observes signal_c_b;

%%%

%%%Action signal_c_c

executable signal_c_c if B(c,-looking_c), B(c,looking_c);
signal_c_c causes looking_c;
c observes signal_c_c;
c observes signal_c_c;

%%%

%%%Action distract_a_a

executable distract_a_a if B(a,looking_a), B(a,looking_a);
distract_a_a causes -looking_a;
a observes distract_a_a;
a observes distract_a_a;

%%%

%%%Action distract_a_b

executable distract_a_b if B(a,looking_b), B(a,looking_a);
distract_a_b causes -looking_b;
a observes distract_a_b;
b observes distract_a_b;

%%%

%%%Action distract_a_c

executable distract_a_c if B(a,looking_c), B(a,looking_a);
distract_a_c causes -looking_c;
a observes distract_a_c;
c observes distract_a_c;

%%%

%%%Action distract_b_a

executable distract_b_a if B(b,looking_a), B(b,looking_b);
distract_b_a causes -looking_a;
b observes distract_b_a;
a observes distract_b_a;

%%%

%%%Action distract_b_b

executable distract_b_b if B(b,looking_b), B(b,looking_b);
distract_b_b causes -looking_b;
b observes distract_b_b;
b observes distract_b_b;

%%%

%%%Action distract_b_c

executable distract_b_c if B(b,looking_c), B(b,looking_b);
distract_b_c causes -looking_c;
b observes distract_b_c;
c observes distract_b_c;

%%%

%%%Action distract_c_a

executable distract_c_a if B(c,looking_a), B(c,looking_c);
distract_c_a causes -looking_a;
c observes distract_c_a;
a observes distract_c_a;

%%%

%%%Action distract_c_b

executable distract_c_b if B(c,looking_b), B(c,looking_c);
distract_c_b causes -looking_b;
c observes distract_c_b;
b observes distract_c_b;

%%%

%%%Action distract_c_c

executable distract_c_c if B(c,looking_c), B(c,looking_c);
distract_c_c causes -looking_c;
c observes distract_c_c;
c observes distract_c_c;

%%%

%%%Action announce_a

executable announce_a if B(a,tail), tail;
announce_a announces tail;
b observes announce_a if looking_b;
c observes announce_a if looking_c;
a observes announce_a;

%%%

%%%Action announce_b

executable announce_b if B(b,tail), tail;
announce_b announces tail;
a observes announce_b if looking_a;
c observes announce_b if looking_c;
b observes announce_b;

%%%

%%%Action announce_c

executable announce_c if B(c,tail), tail;
announce_c announces tail;
a observes announce_c if looking_a;
b observes announce_c if looking_b;
c observes announce_c;

%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%    INITIAL FLUENTS TRUTH   %%%%%%%%%%%%%%%%%%
%Fluents are considered true when are inserted in :init; otherwise are considered false

%%%True fluents
initially tail, has_key_a, looking_a;
%%%False fluents
initially -looking_b, -has_key_b, -b_==_b, -a_==_a, -has_key_c, -opened, -c_==_c, -c_l_o_s_e_d, -looking_c;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%    INITIAL BELIEFS TRUTH   %%%%%%%%%%%%%%%%%%
%Extracted from the :init field

initially C([a,b,c],-has_key_b);
initially C([a,b,c],-opened);
initially C([a,b,c],has_key_a);
initially C([a,b,c],-looking_b);
initially C([a,b,c],-looking_c);
initially C([a,b,c],-has_key_c);
initially C([a,b,c],looking_a);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%    GOALS   %%%%%%%%%%%%%%%%%%%%%%%%%%
%The goals of the plan. Each goal is presented separately to ease the reading

goal B(b,opened);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
